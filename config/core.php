<?php
class core extends mysqli
{
    //    ... $err => Stores errors generated by running any of the class functions

    var $err;

    // ........ validation images:
    var $extensions = array(
        "jpg",
        "jpeg",
        "png"
    );

    // .......... Variables of Connection DateBase 'MYSQL' :



    var $server = "localhost";
    var $dbname = "admin_blogs";
    var $username = "admin";
    var $password = 'M0#m*d$d&s@';

    // var $username = "root";
    // var $password = '';

    var $dbConnection;
    var $dbError;
    var $path;
    var $upload = 10 * 1024 * 1024;

    public function __construct($host = "", $user = "", $pass = "", $dbname = "")
    {
        $this->dbConnection = new mysqli($this->server, $this->username, $this->password, $this->dbname); // connection with Database mysqli
        if ($this->dbConnection->connect_error) {
            # code...
            $this->setError($this->dbConnection->connect_error);
            // print 'Error connection';
            // die();
            return false;
        } else {
            // print 'Connected ...';
            // die();
            $this->DBquery('SET NAMES utf8');   // not understanding !!!!
        }
        $this->path = is_dir("./assets/media/uploades/") ? "./assets/media/uploades/" : "../assets/media/uploades/"; // not understanding !!!!
    }
    public function __destruct()
    {
        $this->dbConnection->close();
    }
    private function DBquery($query)
    {
        $queries = explode(';', $query);
        foreach ($queries as $q) {
            if (!trim($q))
                continue;
            $result = $this->dbConnection->query($q);
            if (!$result) {
                $this->setError($this->dbConnection->connect_error);
                return false;
            }
        }
        return $result;
    }
    function setError($err)
    {
        $this->err = $err;
    }
    function DBsetError()
    {
        $this->dbError = array(
            $this->dbConnection->errno,
            $this->dbConnection->error
        );
        if ($this->dbConnection->errno == 1062) {
            $key = explode("for key", $this->dbConnection->error);
            if (sizeof($key) == 2) {
                $this->setError("Duplicate data entry (" . str_replace("_", " ", $key[1]) . ")");
            }
        }
    }
    function DBgetError()
    {
        return $this->dbError;
    }

    function check_email_address($email)
    {
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return false;
        }

        return true;
    }

    /*
        Hashing Passwords ...
    */
    function getHash($password)
    {
        if (!$password)
            $password = $this->generateToken(20);

        return password_hash($this->encode($password), PASSWORD_DEFAULT);
    }

    // ***************************************************************************************
    /*
        Check password validation ... 
    */
    function check_password($password)
    {
        if (!preg_match('/(?=^.{8,}$)((?=.*\d)|(?=.*\w+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$/', $password)) {
            return false;
        }
        return true;
    }

    // *************************************************************************************************************
    /*
        Check username validation ... 
    */
    function check_username($username)
    {
        if (!preg_match('/^[A-Za-z][A-Za-z0-9]{6,20}$/', $username)) {
            return false;
        }

        return true;
    }


    function getError()
    {
        return $this->err;
    }
    // ***************************************************************************************

    function generateToken($length = 20)
    {
        return bin2hex(random_bytes($length));
    }

    // ***************************************************************************************
    function encode($password)
    {
        return base64_encode(hash('sha256', $password, true));
    }

    // .........................  Functions  ........................
    
#Region [User]
    function getUser($param)
    {
        $query = "SELECT * FROM `control`";
        $condition = "";

        if (!empty($_POST['username']) && !empty($_POST['password'])) {
            # code...
            if (array_key_exists('id', $param)) {    // Get user id 
                $param['id'] = (int) $param['id'];
                $condition .= " id = $param[id]";
            } else {

                if (array_key_exists('login', $param)) { //auth 

                    $username = mysqli_real_escape_string($this->dbConnection, $param['username']); // username & password from login form 
                    $condition = " username='$username'";
                } 
            }

            if (!empty($condition)) {
                $query .= " WHERE ";
            }

            $result = $this->DBquery("$query $condition");
            if (!$result) {
                $err = $this->DBgetError();
                $this->setError("Error getting user information. : " . $err["1"]);
                return false;
            }

            $returns = array();
            while ($columns = $result->fetch_array(MYSQLI_ASSOC)) {
                // print_r($param);print $this->encode ( $param ["password"] ); die();
                $return['id'] = $columns['id'];
                $return['username'] = $columns['username'];

                if (!password_verify($this->encode($param["password"]), $columns["password"])) {
                    $this->setError("Invalid login credentials");
                    return false;
                }

                $return["email"] = $columns["email"];

                array_push($returns, $return);
            }
            mysqli_free_result($result);
            return $returns;
        } else {
            $this->setError("You have to Enter Username & Password");
        }
    }

    function addUser($param)
    {

        $cols = "";
        $vals = "";
        if (!array_key_exists("username", $param) || !$param["username"]) {
            $this->setError("Please, Enter Username");
            return false;
        }
        $cols = "`username` ";
        $param["username"] = mysqli_real_escape_string($this->dbConnection, $param["username"]);
        $vals = "'$param[username]'";

        if (!array_key_exists("email", $param) || !$param["email"] || !$this->check_email_address($param["email"])) {
            $this->setError("Please, Enter a valid email");
            return false;
        }
        $cols .= ", `email` ";
        $param["email"] = mysqli_real_escape_string($this->dbConnection, $param["email"]);
        $vals .= ", '$param[email]'";


        if (!array_key_exists("password", $param) || !$param["password"]) {
            $this->setError("Please, Enter Password");
            return false;
        } else {
            if (!array_key_exists("password2", $param) || !$param["password2"]) {
                $this->setError("Please, Enter password confirm");
                return false;
            } else {
                if ($param["password"] != $param["password2"]) {
                    $this->setError("Password & password confirm match");
                    return false;
                }
            }
        }

        $cols .= ", `password` ";
        $param["password"] = mysqli_real_escape_string($this->dbConnection, $param["password"]);
        $param["password"] = $this->getHash($param["password"]);
        $vals .= ", '$param[password]'";

        $query = "START TRANSACTION"; // 
        $result = $this->DBquery("$query");

        $query = "INSERT INTO `control` ($cols) VALUES ($vals)"; // Adding to Database 
        $result = $this->DBquery("$query");
        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        $result = $this->DBquery("select last_insert_id()");    //  
        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        while ($columns = mysqli_fetch_array($result, MYSQLI_ASSOC)) {
            $id = $columns["last_insert_id()"];
        }

        mysqli_free_result($result);

        $this->DBquery("COMMIT");

        return $id;
    }

#end Region

#Region [Main Blogs]
    function createBlog($param)
    {
        // die(var_dump($param));

        $cols = "";
        $vals = "";

        if (!array_key_exists("main_title", $param) || !$param["main_title"]) {
            $this->setError("Please, Enter blog main title");
            return false;
        }
        $cols .= "`main_title`";
        $param["main_title"] = mysqli_real_escape_string($this->dbConnection, $param["main_title"]);
        $vals .= "'$param[main_title]'";

        if (!array_key_exists("main_body", $param) || !$param["main_body"]) {
            $this->setError("Please, Enter blog body");
            return false;
        }
        $cols .= ", `main_body`";
        $param["main_body"] = mysqli_real_escape_string($this->dbConnection, $param["main_body"]);
        $vals .= ", '$param[main_body]'";

        if (array_key_exists("main_image", $param) || $param["main_image"]) {
            if ($param["main_image"]["name"]) {
                $extensions = $this->extensions;
                $info = pathinfo(strtolower($param["main_image"]["name"]));
                $ext = strtolower($info["extension"]);
                if (!in_array($ext, $extensions) || empty($info['filename'])) {
                    $this->setError("invalid attachment type (only ZIP, RVT, CAD, JFIF, JPG, JPEG, GIF, PNG or PDF)");
                    return false;
                }
                $newname = time() .  "." . $info["extension"];
                if (filesize($param["main_image"]["tmp_name"]) > $this->upload) {
                    $this->setError("Image size too big");
                    return false;
                }

                $target = $this->path . $newname;
                if (!is_dir($this->path)) {
                    mkdir($this->path, true);
                }

                if (!move_uploaded_file($param["main_image"]["tmp_name"], $target)) {
                    $this->setError("Image could not be saved");
                    return false;
                }

                $cols .= ", `main_image`";
                $vals .= ",'$newname'";
            }
        } else {
            $this->setError("Please Upload Blog Main Image");
            return false;
        }
        $query = "INSERT INTO `blogs` ($cols) VALUES ($vals)";

        // print $query;exit();

        $result = $this->DBquery("$query");

        // die(var_dump($query));

        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        $result = $this->DBquery("select last_insert_id()");
        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        while ($columns = mysqli_fetch_array($result, MYSQLI_ASSOC)) {
            $id = $columns["last_insert_id()"];
        }

        mysqli_free_result($result);

        $this->DBquery("COMMIT");

        return $id;
    }
    // **************************************************************************************

    function getBlog($param)
    {
        // die(var_dump($param));
        $query = "SELECT * FROM `blogs`";
        if (array_key_exists("count", $param)) {
            $query = "SELECT COUNT(*) FROM `blogs` ";
        }
        $condition = "";
        if (array_key_exists('id', $param)) {
            $param['id'] = (int) $param['id'];
            $condition .= " id = $param[id]";
        }
        if (!empty($condition)) {
            $query .= " WHERE ";
        }
        $result = $this->DBquery("$query $condition");

        if (!$result) {
            $err = $this->DBgetError();
            $this->setError("Error getting blogs information. : " . $err["1"]);
            return false;
        }

        $returns = array();
        while ($columns = $result->fetch_array(MYSQLI_ASSOC)) {
            if (array_key_exists("count", $param))
                return $columns["COUNT(*)"];

            $return['id'] = $columns['id'];
            $return['main_title'] = $columns['main_title'];
            $return['main_body'] = $columns['main_body'];
            $return['main_image'] = $columns['main_image'];

            array_push($returns, $return);
        }
        mysqli_free_result($result);
        return $returns;
    }

    function updateBlog($param)
    {
        if (!array_key_exists("id", $param)  || !(int) $param["id"]) {
            $this->setError("Invalid Client");
            return false;
        }

        $ret["id"] = $param["id"];
        $rets = $this->getBlog($ret);
        if (!$rets) return false;
        $ret = $rets[0];

        $update = "";

        if (array_key_exists("main_title", $param)) {
            $param["main_title"] = mysqli_real_escape_string($this->dbConnection, $param["main_title"]);
            if ($param["main_title"] != $ret["main_title"]) {

                if (!$param["main_title"]) {
                    $this->setError("Please, Enter main title");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "main_title= '$param[main_title]'";
            }
        }

        if (array_key_exists("main_body", $param)) {
            $param["main_body"] = mysqli_real_escape_string($this->dbConnection, $param["main_body"]);
            if ($param["main_body"] != $ret["main_body"]) {
                if (!$param["main_body"]) {
                    $this->setError("Please, Enter main body");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "main_body= '$param[main_body]'";
            }
        }

        if (array_key_exists("main_image", $param)) {
            if ($param["main_image"]["name"]) {
                $extensions = $this->extensions;
                $info = pathinfo(strtolower($param["main_image"]["name"]));
                $ext = strtolower($info["extension"]);
                if (!in_array($ext, $extensions) || empty($info['filename'])) {
                    $this->setError("invalid attachment type (only ZIP, RVT, CAD, JFIF, JPG, JPEG, GIF, PNG or PDF)");
                    return false;
                }
                $newname = time() .  "." . $info["extension"];
                if (filesize($param["main_image"]["tmp_name"]) > $this->upload) {
                    $this->setError("Image size too big");
                    return false;
                }

                $target = $this->path . $newname;
                if (!is_dir($this->path)) {
                    mkdir($this->path, true);
                }

                if (!move_uploaded_file($param["main_image"]["tmp_name"], $target)) {
                    $this->setError("Image could not be saved");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "main_image= '$newname'";
              
            }
        } else {
            $this->setError("Please Upload Blog Main Image");
            return false;
        }

        if (!$update) return true;

        $query  = "UPDATE `blogs` SET $update WHERE id=$param[id]"; // print $query;exit();

        $result = $this->DBquery("$query");
        if (!$result) {
            $this->DBsetError();

            return false;
        }
        mysqli_free_result($result);

        return true;
    }
#end Region

#Region [Additional Blog]
    function createAddBlog($param)
    {
        // die(var_dump($param));

        $cols = "";
        $vals = "";

        // if (!array_key_exists("addition_title", $param) || !$param["addition_title"]) {
        //     $this->setError("Please, Enter blog main title");
        //     return false;
        // }
        $cols .= "`addition_title`";
        $param["addition_title"] = mysqli_real_escape_string($this->dbConnection, $param["addition_title"]);
        $vals .= "'$param[addition_title]'";

        // if (!array_key_exists("addition_body", $param) || !$param["addition_body"]) {
        //     $this->setError("Please, Enter blog body");
        //     return false;
        // }
        $cols .= ", `addition_body`";
        $param["addition_body"] = mysqli_real_escape_string($this->dbConnection, $param["addition_body"]);
        $vals .= ", '$param[addition_body]'";

        if (array_key_exists("addition_image", $param) || $param["addition_image"]) {
            if ($param["addition_image"]["name"]) {
                $extensions = $this->extensions;
                $info = pathinfo(strtolower($param["addition_image"]["name"]));
                $ext = strtolower($info["extension"]);
                if (!in_array($ext, $extensions) || empty($info['filename'])) {
                    $this->setError("invalid attachment type (only ZIP, RVT, CAD, JFIF, JPG, JPEG, GIF, PNG or PDF)");
                    return false;
                }
                $newname = time() .  "." . $info["extension"];
                if (filesize($param["addition_image"]["tmp_name"]) > $this->upload) {
                    $this->setError("Image size too big");
                    return false;
                }

                $target = $this->path . $newname;
                if (!is_dir($this->path)) {
                    mkdir($this->path, true);
                }

                if (!move_uploaded_file($param["addition_image"]["tmp_name"], $target)) {
                    $this->setError("Image could not be saved");
                    return false;
                }

                $cols .= ", `addition_image`";
                $vals .= ",'$newname'";
            }
        }

        // Check input 
        if (!array_key_exists("main_id", $param) || !$param["main_id"]) {
            $this->setError("Please, Enter Under Main Title");
            return false;
        }
        // Adding Columns and Values  
        $cols .= ", `main_id`";
        $param["main_id"] = mysqli_real_escape_string($this->dbConnection, $param["main_id"]);
        $vals .= ",'$param[main_id]'";

        $query = "INSERT INTO `addition_blogs` ($cols) VALUES ($vals)";

        // print $query;exit();

        $result = $this->DBquery("$query");

        // die(var_dump($query));

        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        $result = $this->DBquery("select last_insert_id()");
        if (!$result) {
            $this->DBsetError();
            $this->DBquery("ROLLBACK");

            return false;
        }

        while ($columns = mysqli_fetch_array($result, MYSQLI_ASSOC)) {
            $id = $columns["last_insert_id()"];
        }

        mysqli_free_result($result);

        $this->DBquery("COMMIT");

        return $id;
    }

    function getAddBlog($param)
    {
        // die(var_dump($param));
        $query = "SELECT * FROM `addition_blogs`";
        if (array_key_exists("count", $param)) {
            $query = "SELECT COUNT(*) FROM `addition_blogs` ";
        }
        $condition = "";
        if (array_key_exists('id', $param)) {
            $param['id'] = (int) $param['id'];
            $condition .= " id = $param[id]";
        }
        if (!empty($condition)) {
            $query .= " WHERE ";
        }
        $result = $this->DBquery("$query $condition");

        if (!$result) {
            $err = $this->DBgetError();
            $this->setError("Error getting Addition Blogs information. : " . $err["1"]);
            return false;
        }

        $returns = array();
        while ($columns = $result->fetch_array(MYSQLI_ASSOC)) {
            if (array_key_exists("count", $param))
                return $columns["COUNT(*)"];

            $return['id'] = $columns['id'];
            $return['addition_title'] = $columns['addition_title'];
            $return['addition_body'] = $columns['addition_body'];
            $return['addition_image'] = $columns['addition_image'];
            $return['main_id'] = $columns['main_id'];


            $return["blogs"] = array();
            $r["id"] = $return['main_id'];
            $rr = $this->getBlog($r);
            if ($rr) {
                $return["blogs"] = $rr[0];
            }

            array_push($returns, $return);
        }
        mysqli_free_result($result);
        return $returns;
    }

    function updateAddBlog($param)
    {
        // die(var_dump($param));
        if (!array_key_exists("id", $param)  || !(int) $param["id"]) {
            $this->setError("Invalid Blog");
            return false;
        }

        $ret["id"] = $param["id"];
        $rets = $this->getAddBlog($ret);
        if (!$rets) return false;
        $ret = $rets[0];
        $update = "";

        if (array_key_exists("addition_title", $param)) {
            $param["addition_title"] = mysqli_real_escape_string($this->dbConnection, $param["addition_title"]);
            if ($param["addition_title"] != $ret["addition_title"]) {

                if (!$param["addition_title"]) {
                    $this->setError("Please, Enter addition title");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "addition_title= '$param[addition_title]'";
            }
        }

        if (array_key_exists("addition_body", $param)) {
            $param["addition_body"] = mysqli_real_escape_string($this->dbConnection, $param["addition_body"]);
            if ($param["addition_body"] != $ret["addition_body"]) {
                if (!$param["addition_body"]) {
                    $this->setError("Please, Enter addition body");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "addition_body= '$param[addition_body]'";
            }
        }

        if (array_key_exists("addition_image", $param)) {
            if ($param["addition_image"]["name"]) {
                $extensions = $this->extensions;
                $info = pathinfo(strtolower($param["addition_image"]["name"]));
                $ext = strtolower($info["extension"]);
                if (!in_array($ext, $extensions) || empty($info['filename'])) {
                    $this->setError("invalid attachment type (only ZIP, RVT, CAD, JFIF, JPG, JPEG, GIF, PNG or PDF)");
                    return false;
                }
                $newname = time() .  "." . $info["extension"];
                if (filesize($param["addition_image"]["tmp_name"]) > $this->upload) {
                    $this->setError("Image size too big");
                    return false;
                }

                $target = $this->path . $newname;
                if (!is_dir($this->path)) {
                    mkdir($this->path, true);
                }

                if (!move_uploaded_file($param["addition_image"]["tmp_name"], $target)) {
                    $this->setError("Image could not be saved");
                    return false;
                }
                if ($update) $update .= ", ";
                $update .= "addition_image= '$newname'";
              
            }
        } 
        if (!$update) return true;

        $query  = "UPDATE `addition_blogs` SET $update WHERE id=$param[id]"; //print $query;exit();

        // die(var_dump($query));
        $result = $this->DBquery("$query");
        if (!$result) {
            $this->DBsetError();

            return false;
        }
        mysqli_free_result($result);

        return true;
    }
#end Region

}
